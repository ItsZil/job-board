@using job_board.Utilities
@inherits LayoutComponentBase
@inject TokenAuthStateProvider TokenAuthStateProvider
@inject NavigationManager Navigate

<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="1">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudButton Variant="Variant.Text" Class="ml-3" Href="/"><MudText Typo="Typo.h5" Color="Color.Tertiary">Job Board</MudText></MudButton>
        <MudSpacer />
        <div>
            <MudContainer>
                <MudAvatar>
                    <MudIconButton Icon="@Icons.Material.Filled.AccountCircle" Color="Color.Inherit" Size="Size.Large" OnClick="@ToggleAccountOpen" />
                </MudAvatar>
                <MudPopover Open="@_accountMenuOpen" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter">
                    @if (_loggedIn)
                    {
                        <MudButton OnClick="Logout" Href="/logout">
                            <ChildContent>
                                <MudIcon Icon="@Icons.Material.Filled.ExitToApp" Class="mr-1" />
                                <MudText Typo="Typo.button" Color="Color.Inherit">Logout</MudText>
                            </ChildContent>
                        </MudButton>
                    }
                    else
                    {
                        <div>
                            <MudButton OnClick="Login">
                                <ChildContent>
                                    <MudIcon Icon="@Icons.Material.Filled.ExitToApp" Class="mr-1" />
                                    <MudText Typo="Typo.button" Color="Color.Inherit">Login</MudText>
                                </ChildContent>
                            </MudButton>

                            <MudButton OnClick="Logout">
                                <ChildContent>
                                    <MudIcon Icon="@Icons.Material.Filled.PersonAdd" Class="mr-1" />
                                    <MudText Typo="Typo.button" Color="Color.Inherit">Register</MudText>
                                </ChildContent>
                            </MudButton>
                        </div>
                    }
                </MudPopover>
            </MudContainer>
        </div>
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
        <NavMenu></NavMenu>
    </MudDrawer>
    <MudMainContent Style="padding-bottom:60px">
        @Body
    </MudMainContent>
    <Footer />
</MudLayout>

@code {
    bool _drawerOpen = true;
    bool _accountMenuOpen = false;
    bool _loggedIn = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await TokenAuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        _loggedIn = authState.User.Identity.IsAuthenticated;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var authState = await TokenAuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        _loggedIn = authState.User.Identity.IsAuthenticated;
    }

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    void ToggleAccountOpen()
    {
        _accountMenuOpen = !_accountMenuOpen;
    }

    void Login()
    {
        ToggleAccountOpen();
        Navigate.NavigateTo("/login");
    }

    void Logout()
    {
        ToggleAccountOpen();
        Navigate.NavigateTo("/logout");
    }
}

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>