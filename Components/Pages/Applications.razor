@page "/Applications"
@using Microsoft.AspNetCore.Components.Authorization
@using job_board.Components.Dialogs
@using job_board.Utilities
@using job_board.Models;
@using job_board.ViewModels.Application

@inject TokenAuthStateProvider TokenAuthStateProvider
@inject IHttpClientFactory ClientFactory
@inject IDialogService DialogService
@inject NavigationManager Navigate

<PageTitle>Applications</PageTitle>

<MudContainer Class="mt-16 px-8" MaxWidth="MaxWidth.False">
    <MudItem xs="12" sm="12">
        <MudPaper Elevation="2" Class="pa-4; overflow-auto" Height="70vh">
            @if (_retrievingApplications)
            {
                <MudContainer Class="d-flex flex-column justify-content-center align-items-center">
                    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Size="Size.Medium" Class="ml-10 mt-10" />
                </MudContainer>
            }
            else @if (_isCandidate)
            {
                <MudText Typo="Typo.h5" Class="pa-4">My Applications</MudText>
                <MudList Clickable="true">
                    @foreach (var application in AllApplications)
                    {
                        <MudDivider />
                        <MudListItem @onclick="(e) => OpenApplicationViewDialog(AllAds.Where(a => a.Id == application.AdId).FirstOrDefault(), application)">
                            <MudText Typo="Typo.h6">@AllAds.Where(a => a.Id == application.AdId).FirstOrDefault().Title</MudText>
                            <MudText> @AllAds.Where(a => a.Id == application.AdId).FirstOrDefault().Company.CompanyName </MudText>
                            <MudSpacer />
                            <MudText Style="color:gray" Typo="Typo.subtitle2">Application Date: @application.ApplicationDate</MudText>
                        </MudListItem>
                    }
                </MudList>
            }
            else
            {
                <MudText Typo="Typo.h5" Class="pa-4">Received Applications</MudText>
                <MudList Clickable="true">
                    @foreach (var application in AllApplications)
                    {
                        <MudDivider />
                        <MudListItem @onclick="(e) => OpenApplicationViewDialog(AllAds.Where(a => a.Id == application.AdId).FirstOrDefault(), application)">
                            <MudText Typo="Typo.h6">@AllAds.Where(a => a.Id == application.AdId).FirstOrDefault().Title</MudText>
                            <MudText> @AllAds.Where(a => a.Id == application.AdId).FirstOrDefault().Company.CompanyName </MudText>
                            <MudSpacer />
                            <MudText Style="color:gray" Typo="Typo.subtitle2">Application Date: @application.ApplicationDate</MudText>
                        </MudListItem>
                    }
                </MudList>
            }
        </MudPaper>
    </MudItem>
</MudContainer>

@code {
    bool _loggedIn = false;
    bool _loggingIn = true;
    int _userId;
    string _userRole;

    bool _isCompany = false;
    bool _isCandidate = false;
    bool _isAdmin = false;

    List<Company> AllCompanies = new List<Company>();
    List<Ad> AllAds = new List<Ad>();
    List<ApplicationResponseVM> AllApplications = new List<ApplicationResponseVM>();

    bool _retrievingApplications = true;

    HttpClient client;

    protected override async Task OnInitializedAsync()
    {
        var authState = await TokenAuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        _loggedIn = authState.User.Identity.IsAuthenticated;
        client = ClientFactory.CreateClient("httpClient");

        if (_loggedIn)
        {
            _userId = int.Parse(user.FindFirst("nameid")?.Value ?? "-1");
            _userRole = user.FindFirst("role")?.Value ?? "candidate";

            if (_userRole == "company")
            {
                _isCompany = true;
            }
            else if (_userRole == "candidate")
            {
                _isCandidate = true;
            }
            else if (_userRole == "admin")
            {
                _isCompany = true;
                _isCandidate = true;
                _isAdmin = true;
            }
        }
        else
        {
            Navigate.NavigateTo("/login");
        }
        _loggingIn = false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender && client.DefaultRequestHeaders.Authorization == null)
        {
            var token = await TokenAuthStateProvider.GetTokenRawAsync();
            client.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            if (_isCandidate)
                AllCompanies = await client.GetFromJsonAsync<List<Company>>("api/companies");
            else
                AllCompanies.Add(await client.GetFromJsonAsync<Company>($"api/companies/{_userId}"));

            var adTasks = AllCompanies.Select(company => client.GetFromJsonAsync<List<Ad>>($"api/companies/{company.Id}/ads")).ToList();
            var ads = await Task.WhenAll(adTasks);
            foreach (var adList in ads)
            {
                AllAds.AddRange(adList);
            }
            var applicationTasks = AllAds.Select(ad => client.GetFromJsonAsync<List<ApplicationResponseVM>>($"api/companies/{ad.Company.Id}/ads/{ad.Id}/applications")).ToList();
            var applications = await Task.WhenAll(applicationTasks);
            foreach (var applicationList in applications)
            {
                AllApplications.AddRange(applicationList);
            }
            AllApplications = AllApplications.OrderByDescending(a => a.ApplicationDate).ToList();
            _retrievingApplications = false;
            StateHasChanged();
        }
    }

    private void OpenApplicationViewDialog(Ad selectedAd, ApplicationResponseVM application)
    {
        if (application.CoverLetter == null || application.CoverLetter == string.Empty)
        {
            application.CoverLetter = "N/A";
        }

        var parameters = new DialogParameters<ApplicationViewDialog>();
        parameters.Add("Ad", selectedAd);
        parameters.Add("Application", application);
        parameters.Add("LoggedIn", _loggedIn);
        parameters.Add("IsCandidate", _isCandidate);
        var options = new DialogOptions { CloseOnEscapeKey = true };
        DialogService.Show<ApplicationViewDialog>(selectedAd.Title, parameters, options);
    }
}
